[
  
  {
    "title": "Docker 설치",
    "url": "/posts/How-to-install-Docker/",
    "categories": "Docker, Introduction to Docker",
    "tags": "docker, installation, macos, ubuntu, linux",
    "date": "2023-05-03 21:30:00 +0900",
    





    
    "snippet": "1. 도커 설치 in Mac OS  https://docs.docker.com/desktop/install/mac-install/ 링크 접속.  Intel chip이면 왼쪽, M1 or M2를 사용하면 오른쪽 선택.  설치.  docker 입력 후 여러 명렁어 나오면 설치 완료.2. 도커 설치 in Linux(Ubuntu)  Ubuntu에서 Termi...",
    "content": "1. 도커 설치 in Mac OS  https://docs.docker.com/desktop/install/mac-install/ 링크 접속.  Intel chip이면 왼쪽, M1 or M2를 사용하면 오른쪽 선택.  설치.  docker 입력 후 여러 명렁어 나오면 설치 완료.2. 도커 설치 in Linux(Ubuntu)  Ubuntu에서 Terminal 열기  sudo apt-get update  sudo apt install docker.io  sudo snap install docker  docker –version or docker -v  sudo docker run hello-world  sudo docker images  sudo docker ps -a  sudo docker ps2.1 sudo 없이 도커 실행  도커 그룹 생성      sudo group add docker        도커 그룹에 유저 추가      sudo usermod -aG docker ${USER}        도커 재시작      sudo service docker restart        현재 사용자 재로그인      sudo su -       //root로 변경  su - username   //user로 변경         테스트      docker run hello-world      "
  },
  
  {
    "title": "도커는 무엇인가?",
    "url": "/posts/What-is-Docker/",
    "categories": "Docker, Introduction to Docker",
    "tags": "docker, image, container",
    "date": "2023-03-17 23:45:00 +0900",
    





    
    "snippet": "1. 도커란 무엇인가?도커(Docker)는 리눅스 컨테이너에 여러 기능을 추가함으로써 어플리케이션을 컨테이너로서 좀 더 쉽게 사용할 수 있게 만들어진 오픈소스 프로젝트입니다.2. 왜 도커를 써야하는가?원하는 개발 환경을 파일에 저장하면, 도커는 이를 내가 원하는 어떤 머신에 해당 환경을 시뮬레이션 할 수 있고 환경들은 각기 독립적으로 존재하기 때문에,...",
    "content": "1. 도커란 무엇인가?도커(Docker)는 리눅스 컨테이너에 여러 기능을 추가함으로써 어플리케이션을 컨테이너로서 좀 더 쉽게 사용할 수 있게 만들어진 오픈소스 프로젝트입니다.2. 왜 도커를 써야하는가?원하는 개발 환경을 파일에 저장하면, 도커는 이를 내가 원하는 어떤 머신에 해당 환경을 시뮬레이션 할 수 있고 환경들은 각기 독립적으로 존재하기 때문에, 원하는 환경에서 모듈식으로 관리 가능합니다.  어플리케이션의 개발과 배포 수월  독립성 및 확장성 향상3. VM(Virtual Machine) vs 도커(Docker)기존 가상화 기술은 하이퍼바이저를 이용해 여러 개의 운영체제를 하나의 호스트에서 생성해 사용하는 방식이었습니다. 하이퍼바이저에 의해 생성되고 관리되는 운영체제는 게스트 운연체제(Guest OS)라고 하며, 각 게스트 운영체제는 다른 게스트 운영체제와는 완전히 독립된 공간과 시스템 자원을 할당받아 사용합니다. 대표적으로 VirtualBox, VMware가 있습니다.반면, 도커는 프로세스 단위의 격리 환경을 만들기 때문에 성능 손실이 거의 없습니다. 컨테이너에 필요한 커널은 호스트의 커널을 공유해 사용하고, 컨테이너 안에는 어플리케이션을 구동하는 데 필요한 라이브러리 및 실행 파일만 존재하기 때문에 컨테이너를 이미지로 만들었을 때, 이미지의 용량 또한 가상 머신에 비해 현저히 적습니다.4. 도커 이미지(Docker Image)도커 이미지는 서비스 운영에 필요한 서버 프로그램, 라이브러리 및 소스코드, 컴파일된 실행 파일을 묶은 형태라고 볼 수 있습니다. 즉, 어떠한 프로세스를 실행하기 위한 모든 파일과 환경을 지닌 상태입니다.5. 도커 컨테이너(Docker Container)도커 컨테이너는 이미지를 실행한 상태로, 응용프로그램의 dependency와 함께 프로그램 자체를 패키징하여 격리된 공간에서 프로세스를 동작시킨 것입니다."
  },
  
  {
    "title": "Introduction to Java (5) - 클래스와 객채 1",
    "url": "/posts/Introduction-to-Java(5)/",
    "categories": "Java, Introduction to Java",
    "tags": "java",
    "date": "2023-02-04 01:00:00 +0900",
    





    
    "snippet": "1. 객체 지향 프로그래밍과 클래스 (절차지향 vs 객체지향)절차지향 프로그래밍이란 물이 위에서 아래로 흐르는 것처럼 순차적인 처리가 중요시 되며 프로그램 전체가 유기적으로 연결되도록 만드는 프로그래밍 기법입니다. 대표적인 절차지향 언어에는 C언어가 있습니다. 이는 컴퓨터의 작업 처리 방식과 유사하기 때문에 객체지향 언어를 사용하는 것에 비해 더 빨리...",
    "content": "1. 객체 지향 프로그래밍과 클래스 (절차지향 vs 객체지향)절차지향 프로그래밍이란 물이 위에서 아래로 흐르는 것처럼 순차적인 처리가 중요시 되며 프로그램 전체가 유기적으로 연결되도록 만드는 프로그래밍 기법입니다. 대표적인 절차지향 언어에는 C언어가 있습니다. 이는 컴퓨터의 작업 처리 방식과 유사하기 때문에 객체지향 언어를 사용하는 것에 비해 더 빨리 처리되어 시간적으로 유리합니다. 옛날에는 하드웨어와 소프트웨어의 개발 속도차이가 크지 않았습니다. 하지만 하드웨어의 빠른 발전을 통해 컴퓨팅 환경은 급속도로 증가했지만 소프트웨어 개발 시간이 따라가지 못하게 되고 이런 상황에 소프트웨어의 개발시간을 단축하되 하드웨어에 기본적인 사양을 잡아먹어도 더 이상 큰 단점이 아니기에 모듈화, 캡슐화해서 개념적으로 접근하는 형태를 갖는 객체지향 프로그래밍이 탄생했습니다. 객체지향 프로그래밍은 개발하려는 것을 기능별로 묶어 모듈화를 함으로써 같은 기능을 중복으로 연산하지 않거나 모듈을 재활용하기 때문에 유지보수에 유리합니다.  클래스란?          객체 지향 프로그램은 클래스를 기반으로 프로그래밍합니다.      클래스는 객체의 속성과 기능을 코드로 구현한 것입니다.      2. 클래스 살펴보기클래스에 선언하는 ‘멤버 변수’는 다른 말로 속성(property), 특성(attribute) 등으로 표현하기도 합니다.패키지란?패키지는 클래스 파일의 묶음입니다. 패키지를 만들면 프로젝트 하위에 물리적으로 directory가 생성됩니다. 또한 패키지는 계층 구조를 가질 수 있는데, 프로젝트를 수행할 때 패키지의 계층 구조를 구성하는 것은 전체 프로젝트의 소스 코드를 어떻게 관리할지와 관련 있습니다.패키지 선언하기package domain.student.view;public class StudentView {}클래스 이름은 StudentView이지만, 클래스 전체 이름은 domain.student.view.StudentView입니다.3. 메서드매서드는 함수(function)의 한 종류입니다.함수란?함수는 ‘하나의 기능을 수행하는 일련의 코드’ 혹은 어떤 기능을 수행하도록 미리 구현해 놓고 필요할 때마다 호출하여 사용할 수 있습니다.함수 정의하기int add (int num1, int num2) {    int result;    result = num1 + num2;   //num1 + num2를 더한 최종 값    return result;          // 최종 값 반환}add = 함수 이름(int num1, int num2) = 매개 변수return = 반환int = 함수 반환형함수 호출과 스택 메모리 (stack memory)함수를 호출하면 그 함수만을 위한 메모리 공간이 할당 되는데, 이 메모리 공간을 스택(stack)이라고 부릅니다.스택은 자료가 상자처럼 쌓이는 자료 구조를 말하는데, 마지막에 추가된 자료부터 순서대로 꺼내서 사용할 수 있으며 LIFO(Last In First Out) 구조라고 합니다.함수의 장점  기능을 나누어 코드를 효율적으로 구현 가능 (main에만 때려넣지 않아도 됨)  기능별로 함수를 구현해 놓으면 같은 기능을 매번 코드로 만들지 않고 그 기능의 함수를 호출4. 클래스와 인스턴스클래스를 사용하여 프로그램을 실행하려면 먼저 main() gkatnfmf dkfdkdigkqslek. main() 함수는 자바 가상 머신(Java Virtual Machine; JVM)이 프로그램을 시작하기 위해 호출하는 함수입니다. 클래스 내부에 만들지만, 클래스의 메서드는 아닙니다.main() 함수에서 클래스를 사용하는 방법은 두가지 있습니다.  우리가 만든 클래스 내부에 main() 함수를 만든다.  외부에 테스트용 클래스를 만들어 사용한다.new 예약어로 클래스 생성하기자바에서 클래스를 생성할 때는 new 예약어를 사용하고 이어서 생성자를 써줍니다.클래스 자료형 변수를 선언하고 new 예약어로 생성자를 호출하여 대입하면 새로운 클래스가 생성됩니다. 클래스가 생성된다는 것은 클래스를 실제 사용할 수 있도록 메모리 공간(힙 메모리; heap memory)을 할당 받는다는 뜻입니다. 이렇게 실제로 사용할 수 있도록 생덩된 클래스를 ‘인스턴스’라고 합니다.클래스형 변수 이름 = new 생성자;Student studentLee = new Student();인스턴스와 참조 변수  객체          객체란 ‘의사나 행위가 미치는 대상’ 입니다.        클래스          객체를 코드로 구현한 것이 클래스 입니다.        인스턴스          클래스가 메모리 공간에 생성된 상태를 인스턴스라고 합니다.        참조 변수                  studentLee.studentName = \"Lee\";   //이때 .이라는 도트 연산자 사용                    인스턴스와 힙메모리new student()를 선언하면 student 하나가 생성되는데 각 student는 studentID, studentName 등의 멤버 변수를 가지고 있습니다. 이때, 이들 변수를 저장할 공간이 필요합니다. 이때 사용하는 메모리가 힙 메모리(heap memory) 입니다.힙 메모리란?힙(heap)은 프로그램에서 사용하는 동적 메모리(dynamic memory) 공간을 말합니다. 일반적으로 프로그램은 스택, 힙, 데이터 이렇게 세 영역을 사용하는데, 객체가 생성될 때 사용하는 공간이 힙입니다. 힙은 동적으로 할당되며 사용이 끝나면 메모리를 해제해 주어야 합니다. C나 C++과 같은 언어에서는 개발자가 직접 메모리를 해제해야 하지만, 자바에서는 가비지 컬렉터(garbage collector)가 자동으로 메모리를 해제해 줍니다.5. 생성자 (Constructor)package constructor;public class PersonTest {    public static void main(String[] args) {        Person personLee = new Person();    // 이때 new 'Person()' = 생성자    }}디폴트 생성자 (default constructor)생성자가 없는 클래스는 클래스 파일을 컴파일할 때 자바 컴파일러에서 자동으로 생성자를 만들어 줍니다.생성자 만들기생성자는 주료 멤버 변수에 대한 값들을 매개변수로 받아서 인스턴스가 새로 생성될 때 멤버 변수 값들을 초기화 하는 역할을 합니다. 즉, 인스턴스가 생성됨과 동시에 멤버 변수의 값을 지정하고 인스턴스를 초기화하기 위해 생성자를 직접 구현하여 사용합니다.생성자 오버로드 (constructor overload)클래스에 생성자가 두 개 이상 제공되는 경우를 생성자 오버로드(constructor overload)라고 합니다. 필요에 따라 매개변수가 다른 생성자를 여러 개 만들 수 있습니다.6. 참조 자료형크기가 정해진 기본 자료형(int, char, float, double 등)으로 선언하는 변수가 있고, 클래스 자료형으로 선언하는 참조 자료형 변수가 있습니다.package reference;public class Subject {    String SubjectName;    int scorePoint;}public class Student{    int studentID;    String studentName;    Subject korean;    Subject math;}7. 정보 은닉 (public vs private)package hiding;public class Student{    int studentID;    private String studentName;         //private한 값    int grade;    String address;    public String getStudentName() {        return studentName;            }    public void setStudentName() {        this.studentName = studentName;    }}getStudentName() or setStudentName()으로 우회해서 사용 가능"
  },
  
  {
    "title": "Introduction to Database (1) - Introduction",
    "url": "/posts/Introduction-to-Database(1)-copy/",
    "categories": "Database, Introduction to Database",
    "tags": "database, instance, schema, relational, sql",
    "date": "2023-02-01 01:00:00 +0900",
    





    
    "snippet": "본 내용은 “Based on Database System Concepts - 7th Edition” 내용을 정리한 내용입니다.1. 데이터베이스(Database)란?체계적이고 조직적으로 정리된 전자식 또는 기타 수단으로 개별적으로 접근할 수 있는 독립된 저작물, 데이터 또는 기타 소재의 수합물을 말합니다.2. Database Applications Ex...",
    "content": "본 내용은 “Based on Database System Concepts - 7th Edition” 내용을 정리한 내용입니다.1. 데이터베이스(Database)란?체계적이고 조직적으로 정리된 전자식 또는 기타 수단으로 개별적으로 접근할 수 있는 독립된 저작물, 데이터 또는 기타 소재의 수합물을 말합니다.2. Database Applications Example  Enterprise Information          Sales: customers, products, purchases      Accounting: payments, receipts, assets      Human Resources: Information about employees, salaries, payroll taxes.            Manufacturing: management of production, inventory, orders, supply chain.    Banking and finance          Customer information, accounts, loans, and banking transactions.      Credit card transactions      Finance: sales and purchases of financial instruments (e.g., stocks and bonds; storing real-time market data            Universities: registration, grades        Airlines: reservations, schedules    Telecommunication: records of calls, texts, and data usage, generating          monthly bills, maintaining balances on prepaid calling cards        Web-based services          Online retailers: order tracking, customized recommendations      Online advertisements        Navigation systems: For maintaining the locations of varies places of          interest along with the exact routes of roads, train systems, buses, etc.      3. 데이터 모델의 종류 (Data Models)  A collection of tools for describing          Data (데이터)      Data relationships (데이터 관계)      Data semantics (데이터 의미)      Data constraints (데이터 제약)        Relational model (관계형 모델)          All the data is stored in various tables (모든 데이터는 다양한 테이블에 저장되어 있다.)        Entity-Relationship data model (mainly for database design) (엔티티-관계 데이터 모델)  Object-based data models (Object-oriented and Object-relational) (객체 지향 및 객체 관계)  Semi-structured data model (XML) (반 구조화된 데이터 모델)  Other older models:          Network model (네트워크 모델)      Hierarchical model (계층적 모델)      4. 인스턴스와 스키마 (Instances and Schemas)  프로그래밍 언어의 유형(Type) 및 변수(Variables)가 유사하다.  논리적 스키마 (Logical Schema):  데이터베이스의 전체 논리적 구조          예시: The database consists of information about a set of customers and accounts in a bank and the relationship between them        물리적 스키마 (Physical Schema): 데이터베이스의 전체 물리적 구조  인스턴스 (Instance) – 특정 시점에서 데이터베이스의 실제 콘텐츠 (변숫값과 유사)5. 물리적 데이터 독립성 (Physical Data Independence)  논리적 스키마를 변경하지 않고 물리적 스키마를 수정할 수 있는 기능  애플리케이션은 논리적 스키마에 의존  일반적으로 일부 부품의 변경이 다른 부품에 심각한 영향을 미치지 않도록 다양한 수준과 구성 요소 간의 인터페이스를 잘 정의해야 합니다.6. 자료 정의 언어 (Data Definition Language - DDL)  데이터베이스 스키마 정의를 위한 사양 표기7. 자료 처리 언어 (Data Manipulation Language - DML)  데이터베이스 관리 체계에 저장된 자료에 접근하고 조회하기 위해 대화 방식으로 사용하거나, 프로그래밍 언어 소스 코드에서 사용될 수 있는 SQL 문  DML의 2가지 유형          절차적 DML (Procedural DML): 사용자가 필요한 데이터와 해당 데이터를 가져오는 방법을 지정      선언적 DML 혹은 비절차적 DML (Declarative DML or Non-procedural DML): 사용자가 데이터를 가져오는 방법을 지정하지 않고 필요한 데이터를 지정하도록 요구      8. SQL 쿼리 언어 (SQL Query Language)  SQL 쿼리 언어는 비절차적  쿼리는 여러 테이블 (Possibly only one)을 입력으로 취하고 항상 단일 테이블을 반환합니다9. 데이터베이스 설계 (Database Design)데이터베이스의 일반적인 구조를 설계하는 과정  논리적 설계 – 데이터베이스 스키마 결정          데이터베이스 디자인을 할 때에 논리적인 솬계 스키마를 찾아야 합니다.        물리적 설계 - 데이터베이스의 물리적 레이아웃 결정10. 데이터베이스 엔진 (Database Engine)데이터베이스 시스템은 전체 시스템의 각 책임을 처리하는 모듈로 분할데이터베이스 시스템의 기능적 구성 요소는 다음과 같이 나눌 수 있습니다.  스토리지 관리자 (The storage manager)          Data file      Data dictionary      Indice        쿼리 프로세서 구성 요소 (The query processor component): DDL interpreter / DML compiler / Query evaluation engine          구문 분석 및 번역 (Parasing and translation)      최적화 (Optimization)      평가 (Evaluation)        트랜잭션 관리 구성 요소 (The transaction management component)11. 데이터베이스 애플리케이션 (Database Application)데이터베이스 응용 프로그램은 일반적으로 두 개 또는 세 부분으로 분할됩니다.  2계층 아키텍처 (Two-tier architecture)          애플리케이션은 클라이언트 머신에 상주하며 서버 머신에서 데이터베이스 시스템 기능을 호출        3계층 아키텍처 (Three-tier architecture)          클라이언트 머신이 프런트 엔드 역할을 하며 직접적인 데이터베이스 호출을 포함하지 않습니다.            클라이언트 측은 애플리케이션 서버와 통신합니다.    애플리케이션 서버는 차례로 데이터베이스 시스템과 통신하여 데이터에 액세스합니다.12. 데이터베이스 관리자 (Database Administrator)A person who has central control over the system is called a database administrator (DBA)  Schema definition  Storage structure and access-method definition  Schema and physical-organization modification  Granting of authorization for data access  Routine maintenance  Periodically backing up the database  Ensuring that enough free disk space is available for normal operations, and upgrading disk space as required  Monitoring jobs running on the database and ensuring that performance is not degraded by very expensive tasks submitted by some users"
  },
  
  {
    "title": "Introduction to Java (4) - 제어 흐름 이해하기",
    "url": "/posts/Introduction-to-Java(4)/",
    "categories": "Java, Introduction to Java",
    "tags": "java, if, else, for, while",
    "date": "2023-01-25 00:00:00 +0900",
    





    
    "snippet": "제어 흐름은 자세히 다루지 않고 키포인트만 짚고 넘어갈 것입니다. 제어 흐름은 기존에 다른 언어를 사용하신 분들에게는 익숙한 부분이고, 그만큼 앞으로 프로그래밍 하시는 동안 굉장한 높은 중요도를 가지고 있습니다. 따라서, 처음 배우시는 분들에게는 꼭 요약본이 아닌 책이나 강의를 먼저 읽어보는 것을 적극 추천드립니다.1. 조건문조건문이란 주어진 조건에 ...",
    "content": "제어 흐름은 자세히 다루지 않고 키포인트만 짚고 넘어갈 것입니다. 제어 흐름은 기존에 다른 언어를 사용하신 분들에게는 익숙한 부분이고, 그만큼 앞으로 프로그래밍 하시는 동안 굉장한 높은 중요도를 가지고 있습니다. 따라서, 처음 배우시는 분들에게는 꼭 요약본이 아닌 책이나 강의를 먼저 읽어보는 것을 적극 추천드립니다.1. 조건문조건문이란 주어진 조건에 따라 다른 문장을 선택할 수 있도록 프로그래밍하는 것을 말합니다.  if문, if-else문, if-else if-else문, if-if문  조건문과 조건 연산자 –&gt; max = (a &gt; b) ? a : b;      switch-case 문    if-else if문과 if-if문의 차이          if-else if문은 하나의 조건을 만족하면 나머지 조건을 비교하지 않고 다음 수행문으로 넘어갑니다. 하지만 if문으로만 이루어진 코드는 조건마다 각각 비교합니다.      2. 반복문반복문이란, 반복 수행을 수행 할 수 있도록 프로그래밍하는 것을 말합니다.  while문  do-while문  for문  continue, break"
  },
  
  {
    "title": "Introduction to Java (3) - 자바의 여러가지 연산자",
    "url": "/posts/Introduction-to-Java(3)/",
    "categories": "Java, Introduction to Java",
    "tags": "java, operator, operand, assignment",
    "date": "2023-01-21 21:00:00 +0900",
    





    
    "snippet": "1. 항과 연산자연산에 사용하는 기호를 연산자(operator)라고 합니다. 그리고 연산에 사용하는 값을 항(operand)이라고 합니다. 연산자는 항의 개수에 따라 단항 연산자, 이항 연산자, 삼항 연산자로 나눌 수 있습니다.  단항 연산자          항이 한 개인 연산자      ex) ++num        이항 연산자          항이...",
    "content": "1. 항과 연산자연산에 사용하는 기호를 연산자(operator)라고 합니다. 그리고 연산에 사용하는 값을 항(operand)이라고 합니다. 연산자는 항의 개수에 따라 단항 연산자, 이항 연산자, 삼항 연산자로 나눌 수 있습니다.  단항 연산자          항이 한 개인 연산자      ex) ++num        이항 연산자          항이 두 개인 연산자      ex) num1 + num2;        삼항 연산자          항이 세 개인 연산자      ex) (5 &gt; 3 ? 1 : 0;)      프로그램에서 사용하는 연산자는 우선순위가 있습니다. 단항 연산자가 가장 높고 이항, 삼항 연산자 순서입니다.2. 대입 연산자대입 연산자(assignment operator)는 변수에 값을 대입하는 연산자 입니다. 대입 연산자는 이항 연산자 중 우선순위가 가장 낮은 연산자입니다.왼쪽 변수 = 오른쪽 변수(또는 식)int age = 24;   //나이를 의미하는 age 변수에 24를 대입함totalScore = mathScore + engScore;  //mathScore과 engScore을 더하여 totalScore에 대입함3. 부호 연산자부호 연산자는 +, - 두 가지가 있습니다. 더하기, 빼기 연산에 쓰는 이항 연산자이면서 부호를 나타내는 단항 연산자로도 사용합니다.package operation;public class operationEX {    public static void main(String[] args) {        int num = 10;        System.out.println(+num);   //10이 그대로 출력됨        System.out.println(-num);   //-10이 출력되지만 num값은 변하지 않음        System.out.println(num);    //10이 그대로 출력 됨        num = -num;                 //num을 음수로 바꿔서 다시 num에 대입함        System.out.println(num);    //-10이 출력됨    }}4. 산술 연산자사칙 연산에서 사용하는 연산자가 산술 연산자입니다.  더하기 (+)          두 항을 더합니다.        빼기 (-)          앞에 있는 항에서 뒤에 있는 항을 뺍니다.        곱하기 (*)          두 항을 곱합니다.        나누기 (/)          앞에 있는 항에서 뒤에 있는 항을 나누어 몫을 구합니다.        나머지(%)          앞에 있는 항에서 뒤에 있는 항을 나누어 나머지를 구합니다.      산술 연산자의 우선순위는 일반 수학의 산술 연산과 같습니다. 나머지를 구하는 % 연산자의 우선순위는 *, / 연산자의 우선순위와 동일합니다.5. 증가, 감소 연산자증가, 감소 연산자는 단항 연산자 입니다. 연산자 앞이나 뒤에 사용하며 값을 1만큼 늘리거나 1만큼 줄입니다.  ++          항의 값에 1을 더합니다.        val = ++num;    // 먼저 num 값이 1 증가한 후 val 변수에 대입val = num++;    // val 변수에 기존 num 값을 먼저 대입한 후 num 값 1 증가                      --          항의 값에 1을 뺍니다.        val = --num;    //먼저 num 값이 1 감소한 후 val 변수에 대입val = num--;    //val 변수에 기존 num 값을 먼저 대입한 후 num 값 1 감소                    6. 관계 연산자관계 연산자는 항이 두 개인 이항 연산자 입니다. 두 개의 항 중 어느 것이 더 큰지, 작은지, 같은지 등의 여부를 검사합니다.  &gt;          왼쪽 항이 크면 참을, 아니면 거짓을 반환합니다.        &lt;          왼쪽 항이 작으면 참, 아니면 거짓을 반환합니다.        &gt;=          왼쪽 항이 오른쪽 항보다 크거나 같으면 참, 아니면 거짓을 반환합니다.        &lt;=          왼쪽 항이 오른쪽 항보다 작거나 같으면 참, 아니면 거짓을 반환합니다.        ==          두 개 항의 값이 같으면 참, 아니면 거짓을 반환합니다.        !=          두 개 항이 다르면 참, 아니면 거짓을 반환합니다.        boolean value = (myAge &gt; 25);     //가독성이 좋은 코드를 만들기 위해 괄호를 사용7. 논리 연산자논리 연산자는 중학교에 배운 명제를 생각하면 됩니다. 두 명제가 모두 참이면 논리 곱은 참이고, 두 명제 중 하나만 참이면 논리 합은 참입니다. 참의 부정은 거짓, 거짓의 부정은 참입니다.  논리 곱 (&amp;&amp;)          두 항이 모두 참인 경우에만 결과 값이 참입니다.      그렇지 않은 경우는 거짓입니다.        논리 합 (||)          두 항 중 하나의 항만 참이면 결과 값은 참입니다      두 항이 모두 거짓이면 결과 값은 거짓입니다.        부정 (!)          단항 연산자입니다.      참인 경우는 거짓으로 바꾸고, 거짓인 경우는 참으로 바꿉니다.        int num1 = 10;  int num2 = 20;  boolean flag = (num1 &gt; 0) &amp;&amp; (num2 &gt; 0);  System.out.println(flag);     //flag는 참  boolean flag = (num1 &lt; 0) &amp;&amp; (num2 &gt; 0);  System.out.println(flag);     //flag는 거짓8. 복합 대입 연산자복합 대입 연산자는 대입 연산자와 다른 연산자를 조합해 하나의 연산자처럼 사용하는 연산자입니다. 산술 연산자, 비트 연산자와 함께 사용하여 코드를 간결하게 표현할 수 있습니다.9. 조건 연산자조건 연산자는 연산에 필요한 항의 개수가 세 개입니다. 그래서 삼항 연산자라고 합니다. 조건 연산은 주어진 조건식이 참인 경우와 거짓인 경우에 다른 결과 값이 나옵니다.  연산자: 조건식 ? 결과1 : 결과2;  기능: 조건식이 참이면 결과1, 조건식이 거짓이면 결과2가 선택됩니다.10. 비트 / 이동 / 시프트(shift) 연산자비트 연산자는 비트 단위로 연산이 이루어지는 연산자입니다. 비트 단위의 연산을 하는 경우는 ‘암호화’ 작업처럼 임의의 숫자를 만들거나, 어떤 변수의 특정 비트를 꺼내보는(마스킹; masking) 경우에 사용합니다. 혹은, 하드웨어에 내장되는 임베디드 시스템 프로그램에서 메모리 용량이 부족하거나 계산이 복잡해서 속도가 느려질 때, 곱셈이나 나눗셈을 비트 이동 연산자를 사용하면 어떤 수의 2배수, 4배수를 만들어 속도를 빠르게 할 수 있습니다.11. 연산자 우선 순위연산자의 일반적인 우선순위는 다음과 같습니다.  단항 연산자가 가장 높고 이항, 삼항 연산자 순서입니다.  대입 연산자의 우선순위가 가장 낮습니다.  산술, 관계, 논리, 대입 연산자 순서로 우선순위를 가지며 ()의 우선순위가 가장 높습니다."
  },
  
  {
    "title": "Introduction to Java (2) - 변수와 자료형",
    "url": "/posts/Introduction-to-Java(2)/",
    "categories": "Java, Introduction to Java",
    "tags": "java, variable, datatype, literal, conversion",
    "date": "2023-01-20 03:33:00 +0900",
    





    
    "snippet": "1. 변수란?어떠한 값을 저장하려면 저장할 공간이 필요한데, 이 공간의 이름이 바로 변수입니다.변수를 사용하기 위해 어떤 형태의 자료를 저장할 것인지 정해야합니다. 예를 들어, 사람의 나이를 저장하려면 정수 형태를 써야 하고, 이름을 저장하려면 문자 형태를 써야합니다. 이 형태를 변수의 ‘자료형’이라고 합니다. 변수의 자료형을 선택했다면 변수의 이름도...",
    "content": "1. 변수란?어떠한 값을 저장하려면 저장할 공간이 필요한데, 이 공간의 이름이 바로 변수입니다.변수를 사용하기 위해 어떤 형태의 자료를 저장할 것인지 정해야합니다. 예를 들어, 사람의 나이를 저장하려면 정수 형태를 써야 하고, 이름을 저장하려면 문자 형태를 써야합니다. 이 형태를 변수의 ‘자료형’이라고 합니다. 변수의 자료형을 선택했다면 변수의 이름도 정해줘야 합니다.package java;public class variable {    public static void main(String[] args) {        int level;      //int는 정수형, level은 변수명 = 정수형 변수 level을 선언        level = 10;     //값 10을 Level 변수에 대입        // or        int level = 10; //level 변수 선언과 동시에 값을 대입(초기화)        // 초기화 = 변수에 처음 값을 대입하는 것    }}2. 변수 이름 정하기  변수 이름은 영문자(대문자, 소문자)나 숫자를 사용할 수 있고, 특수 문자 중에는 $, _만 사용할 수 있습니다.          g_level(O), count100(O), _master(O), $won(O)        변수 이름은 숫자로 시작할 수 없습니다.          27days(X), 1abc(X)        자바에서 사용하는 예약어(미리 약속되어 있는 단어)는 사용 할 수 없습니다.          while, int, break…      - 카멜 표기법  변수의 이름은 대부분 소문자로 시작하며 여러 단어로 변수 이름을 만들 경우 중간에 다른 뜻의 단어가 등장할 때, 첫 글자를 대문자로 사용하는 것도 변수 이름을 알아보기 쉽게 만드는 요령입니다.3. 자료형의 종류자바에서 제공하는 자료형은 기본 자료형과 참조 자료형이 있습니다. 기본 자료형은 자바 라이브러리에서 기본으로 제공하며, 얼마만큼의 메모리를 어떻게 사용할 것인지가 이미 정해져 있습니다.자료형이 다른 정수끼리 더하면 어떻게 될까요?  프로그램이 실행되어 정수 값을 연산할 때, 4바이트를 기본 단위로 사용하기 때문에, 두 정수를 더하기 전에 두 정수는 모두 int형으로 반환되고 또한 더한 결과 값도 int형으로 저장됩니다.4. 자료형 없이 변수 선언하기 (자바 10부터 생긴 문법)자바의 모든 변수를 사용할 때는 사용할 자료형을 정확히 명시해야 합니다. 즉 어떤 변수가 얼마만큼의 메모리를 사용하고 어떤 방식으로 그 값을 저장할지 자료형으로 선언해 주는 것입니다. 그렇지만 자바 10 부터는 자료형을 쓰지 않고도 변수를 사용할 수 있습니다. 이를 지역 변수 자료형 추론(Local variable type inference)라고 합니다. 변수에 대입되는 자료를 보고 컴파일러가 추측하여 알 수 있습니다.var num = 10;               --&gt;             int num = 10;                 var dNum = 10.0;            --&gt;             double dNum = 10.0;var str = \"hello\";          --&gt;             String str = \"hello\";var를 사용하여 변수를 선언하는 방법은 자바스크립트 같은 다른 프로그래밍 언어에서 이미 사용하고 있습니다.다만 자바에서 var를 사용할 때는 다음 사항을 유의해야 합니다.  한번 선언한 자료형 변수를 다른 자료형으로 사용할 수 없습니다.  var로 자료형 없이 변수를 선언하는 방법은 ‘지역 변수’만 가능합니다.5. 상수 선언하기프로그램에서는 변수와 달리, 변하지 않는 수도 필요합니다. 항상 변하지 않는 값을 ‘상수(constant)’라고 합니다. 자바에서 상수는 다음처럼 final 예약어를 사용하여 선언합니다.final double PI = 3.14;final int MAX_NUM = 100;프로그램 내부에서 반복적으로 사용하고, 변하지 않아야 하는 값을 상수로 선언하여 사용하면 좋습니다. 숫자로 표기하였을 때, 그 숫자가 달라지면, 코드 내부의 숫자를 전부 바꿔야 하지만 상수를 선언하면, 상수 선언 값만 바꿔도 되기 때문에 편리합니다.6. 리터럴리터럴(literal)은 프로그램에서 사용하는 모든 숫자, 문자, 논리 값(T/F)을 일컫는 말입니다. 리터럴은 프로그램이 시작할 때, 시스템에 같이 로딩되어 특정 메모리 공간인 상수 풀(constant pool)에 놓입니다.자바에서 정수를 표현하는 메모리의 기본 크기는 4바이트입니다. 하지만 long은 4바이트 크기에 들어갈 수 없기 때문에, 8바이트로 처리하라고 컴파일러에 알려줘야 합니다. 따라서 리터럴 뒤에 식별자 ‘l’ or ‘L’을 써주는 것입니다.마찬가지로 실수 리터럴은 double형, 즉 8바이트로 처리됩니다. float형은 대입이 되지 않아, 역시 식별자 ‘f’ or ‘F’를 써줘야합니다.7. 형 변환정수와 실수는 컴퓨터 내부에서 표현되는 방식이 전혀 다릅니다. 따라서 정수와 실수를 더한다고 할 때 그대로 연산을 수행할 수 없고, 하나의 자료형으로 통일한 후 연산을 해야합니다. 이때 형 변환(type conversion)이 이루어 집니다.형 변환은 크게 묵시적 형 변환(자동 형 변환)과 명시적 형 변환(강제 형 변환) 두가지로 구별해서 생각할 수 있습니다. 형 변환의 기본 원칙은 다음과 같습니다.  바이트 크기가 작은 자료형에서 큰 자료형으로 형 변환은 자동으로 이루어진다.  덜 정밀한 자료형에서 더 정밀한 자료형으로 형 변환은 자동으로 이루어진다.묵시적 형 변환  바이트 크기가 작은 자료형에서 큰 자료형으로 대입하는 경우      byte bNum = 10;  int iNum = bNum;  //byte형 변수 bNum 값을 int형 변수 iNum에 대입함              이 경우 bNum의 크기는 1바이트이고 iNum의 크기는 4바이트이므로 자료 손실 없이 bNum에 들어 있는 값이 모두 iNum에 저장됩니다. 남은 3바이트에는 0으로 채워집니다.        덜 정밀한 자료형에서 더 정밀한 자료형으로 대입하는 경우      int iNum2 = 20;  float fNum = iNum2;              이 경우에는 두 변수의 크기가 같은 4바이트라도 float형인 fNum이 더 정밀하게 데이터를 표현할 수 있으므로 실수형인 float형으로 변환됩니다.        연산 중에 자동 변환되는 경우      int iNum = 20;  float fNum = iNum;  double dNum;  dNum = fNum + iNum;              이 경우에는 dNum = fNum + iNum에서 두 번의 형 변환이 일어납니다.      먼저 fNum + iNum 연산에서 int형이 float형으로 변환됩니다.      두 변수를 더한 결과 값이 dNum에 대입되면서 double형으로 변환됩니다.      이렇듯 바이트 크기가 작은 수에서 큰 수로, 덜 정밀한 수에서 더 정밀한 수로 자료형이 변환되는 경우에는 자동 형 변환이 일어납니다.      명시적 형 변환묵시적 형 변환과 반대의 경우로 생각할 수 있습니다.  바이트 크기가 큰 자료형에서 작은 자료형으로 대입하는 경우      int iNum = 10;  byte bNum = (byte)iNum;   //강제로 형을 바꾸려면 바꿀 형을 괄호를 써서 명시해야 합니다.              byte형은 1바이트로 int형보다 크기가 작기 때문에 자료 손실이 발생할 수 있습니다.      따라서 변환할 자료형을 명시적으로 써 주어야 하며, 이를 강제 형 변환이라고 합니다.      이 경우에는 대입된 값 10을 1바이트 안에 표현 할 수 있으므로 자료 손실이 없습니다.        int iNum = 1000;byte bNum = (byte)iNum;              이 경우에는 값 1000이 byte형 범위(-128 ~ 127)를 넘기 때문에 자료 손실이 발생해 대입된 값이 -24로 출력됩니다.        더 정밀한 자료형에서 덜 정밀한 자료형으로 대입하는 경우          실수 자료형에서 정수 자료형으로 값이 대입되는 경우에도 역시 형 변환을 명시적으로 해주어야 합니다.        double dNum = 3.14;int iNum2 = (int)dNum;  //실수 자료형 double을 정수 자료형 int로 형 변환              이 경우에는 실수의 소수점 이하 부분이 생략되고 다음처럼 정수 부분만 대입됩니다.      "
  },
  
  {
    "title": "Introduction to Java (1) - 자바 프로그래밍 시작하기",
    "url": "/posts/Introduction-to-Java(1)/",
    "categories": "Java, Introduction to Java",
    "tags": "java, jvm, jdk, class, gc",
    "date": "2023-01-18 03:09:00 +0900",
    





    
    "snippet": "1. 프로그래밍이란?프로그래밍을 한다는 것은 컴퓨터가 일을 하도록 컴퓨터 언어로 명령을 만들고 컴퓨터로 하여금 그 명령을 실행하게 하는 것을 말합니다. 프로그램이 프로그래밍 언어 문법에 잘 맞는지 확인하고, 컴퓨터가 이해할 수 있는 언어로 번역을 해야하는데, 이 작업을 컴파일(Compile)이라고 하며, 컴파일 작업을 하는 프로그램을 컴파일러(Comp...",
    "content": "1. 프로그래밍이란?프로그래밍을 한다는 것은 컴퓨터가 일을 하도록 컴퓨터 언어로 명령을 만들고 컴퓨터로 하여금 그 명령을 실행하게 하는 것을 말합니다. 프로그램이 프로그래밍 언어 문법에 잘 맞는지 확인하고, 컴퓨터가 이해할 수 있는 언어로 번역을 해야하는데, 이 작업을 컴파일(Compile)이라고 하며, 컴파일 작업을 하는 프로그램을 컴파일러(Compiler)라고 합니다.2. 왜 자바를 써야하는가?자바는 1991년 제임스 고슬링을 비롯한 선 마이크로시스템스 연구원들이 처음 개발했습니다. 이때, 가전제품이나 휴대용 장치 등에 사용하는 소프트웨어를 만들기 위해 독립적으로 작동하는 더 안정된 프로그래밍 언어가 필요했습니다.3. 자바의 장점?1. 플랫폼에 영향을 받지 않으므로 다양한 환경에서 사용 할 수 있다.  자바는 ‘한번 작성하면, 어디서든 돌아간다(write once, run anywhere)’는 슬로건이 있습니다. 플랫폼에 종속되지 않는 프로그램을 개발하여 여러 플랫폼(Windows, Mac, Linux)에서 실행 할 수 있습니다. 기존에 C언어로 만든 프로그램을 윈도우 운영체제에서 컴파일하면 확장자명이 .exe인 파일이 생겨나는데, 이 파일은 윈도우 운영체제에 맞게 만들어져 있기 때문에, 리눅스나 맥에서는 돌아가지 않습니다.  자바에서는 프로그램을 만들고 컴파일하면 바이트 코드(= class)가 생성이 됩니다. 이 클래스를 실행하려면 운영체제에 맞는 자바 가상 머신(JVM)이 필요합니다. 이것은 운영체제에서 직접 실행하는게 아니라 가상 머신에서 실행하고, 이 가상 머신이 운영체제에 맞는 실행 파일로 바꿔줍니다. 즉! .class 파일을 만들어 두면 운영체제에 맞는 가상 머신을 이용하여 어느 환경에서나 실행할 수 있습니다.  자바 가상 머신(Java Virtual Machine; JVM)은 자바 프로그램 실행 환경을 만들어 주는 소프트웨어  현재 사용하는 컴퓨터의 운영체제에 맞는 자바 실행 환경(Java Runtime Environment; JRE)이 있으면 JVM 존재2. 객체 지향 언어  객체 지향 프로그래밍(Object-Oriented Programming)이란 일의 순서대로 프로그래밍 하는 것이 아닌 여러 객체의 협력을 통해 프로그램을 구현하는 것입니다.  객체 지향 언어로 프로그래밍하면 공통으로 사용하는 부분을 수정하지 않고도 프로그램에 새 기능을 쉽게 추가할 수 있습니다.  따라서 유지 보수가 쉽고, 확장성이 좋습니다.3. 안정적인 프로그램  자바는 C/C++와 같이 포인터를 사용하지 않아 메모리를 직접 제어할 수 없습니다.  동적 메모리 수거를 개발자가 하지 않고 가비지 컬렉터(Garbage Collector; GC)를 이용하므로 메모리를 효율적으로 관리 할 수 있습니다.  가비지 컬렉터(Garbage Collector; GC)란 더 이상 사용하지 않는 동적 메모리를 주기적으로 수거4. 풍부한 오픈 소스  자바에서는 기본 기능을 제공하는 클래스뿐 아니라, 자료구조, 네트워크, 입출력, 예외 처리 등에 최적화된 알고리즘 라이브러리를 제공하는 자바 개발 키트(Java Development Kit; JDK)가 존재합니다.4. 자바로 어떤 프로그램을 만들 수 있을까?자바를 사용하여 서버나 모바일용 앱 등 다양한 프로그램을 개발 할 수 있습니다.ex) 웹서버, 안드로이드 앱, 게임"
  }
  
]

