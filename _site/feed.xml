

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Hajun's Dev Note</title>
  <subtitle>Hajun's development &amp; tech knowledge data warehouse</subtitle>
  <updated>2023-03-18T22:28:54+09:00</updated>
  <author>
    <name>Hajun Lee</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator>
  <rights> © 2023 Hajun Lee </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>도커 이해하기(2) - 도커 설치</title>
    <link href="http://localhost:4000/posts/%EB%8F%84%EC%BB%A4-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0(2)/" rel="alternate" type="text/html" title="도커 이해하기(2) - 도커 설치" />
    <published>2023-03-18T22:00:00+09:00</published>
  
    <updated>2023-03-18T22:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/%EB%8F%84%EC%BB%A4-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0(2)/</id>
    <content src="http://localhost:4000/posts/%EB%8F%84%EC%BB%A4-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0(2)/" />
    <author>
      <name>Hajun</name>
    </author>

  
    
    <category term="Docker" />
    
    <category term="Introduction to Docker" />
    
  

  
    <summary>
      





      

1. 도커 설치 in Mac OS


  https://docs.docker.com/desktop/install/mac-install/ 링크 접속.
  Intel chip이면 왼쪽, M1 or M2를 사용하면 오른쪽 선택.
  설치.
  docker 입력 후 여러 명렁어 나오면 설치 완료.


2. 도커 설치 in Linux(Ubuntu)


  Ubuntu에서 Terminal 열기
  sudo apt-get update
  sudo apt install docker.io
  sudo snap install docker
  docker –version or docker -v
  sudo docker run hello-world
  sudo docker images
  sudo docker ps -a...
    </summary>
  

  </entry>

  
  <entry>
    <title>도커 이해하기(1) - 도커는 무엇인가?</title>
    <link href="http://localhost:4000/posts/%EB%8F%84%EC%BB%A4-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0(1)/" rel="alternate" type="text/html" title="도커 이해하기(1) - 도커는 무엇인가?" />
    <published>2023-03-17T23:45:00+09:00</published>
  
    <updated>2023-03-17T23:54:40+09:00</updated>
  
    <id>http://localhost:4000/posts/%EB%8F%84%EC%BB%A4-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0(1)/</id>
    <content src="http://localhost:4000/posts/%EB%8F%84%EC%BB%A4-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0(1)/" />
    <author>
      <name>Hajun</name>
    </author>

  
    
    <category term="Docker" />
    
    <category term="Introduction to Docker" />
    
  

  
    <summary>
      





      

1. 도커란 무엇인가?

도커(Docker)는 리눅스 컨테이너에 여러 기능을 추가함으로써 어플리케이션을 컨테이너로서 좀 더 쉽게 사용할 수 있게 만들어진 오픈소스 프로젝트입니다.

2. 왜 도커를 써야하는가?

원하는 개발 환경을 파일에 저장하면, 도커는 이를 내가 원하는 어떤 머신에 해당 환경을 시뮬레이션 할 수 있고 환경들은 각기 독립적으로 존재하기 때문에, 원하는 환경에서 모듈식으로 관리 가능합니다.

  어플리케이션의 개발과 배포 수월
  독립성 및 확장성 향상


3. VM(Virtual Machine) vs 도커(Docker)



기존 가상화 기술은 하이퍼바이저를 이용해 여러 개의 운영체제를 하나의 호스트에서 생성해 사용하는 방식이었습니다. 하이퍼바이저에 의해 생성되고 관리되는 운영체제...
    </summary>
  

  </entry>

  
  <entry>
    <title>Introduction to Java (5) - 클래스와 객채 1</title>
    <link href="http://localhost:4000/posts/Introduction-to-Java(5)/" rel="alternate" type="text/html" title="Introduction to Java (5) - 클래스와 객채 1" />
    <published>2023-02-04T01:00:00+09:00</published>
  
    <updated>2023-03-17T22:46:19+09:00</updated>
  
    <id>http://localhost:4000/posts/Introduction-to-Java(5)/</id>
    <content src="http://localhost:4000/posts/Introduction-to-Java(5)/" />
    <author>
      <name>Hajun</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Introduction to Java" />
    
  

  
    <summary>
      





      1. 객체 지향 프로그래밍과 클래스 (절차지향 vs 객체지향)

절차지향 프로그래밍이란 물이 위에서 아래로 흐르는 것처럼 순차적인 처리가 중요시 되며 프로그램 전체가 유기적으로 연결되도록 만드는 프로그래밍 기법입니다. 대표적인 절차지향 언어에는 C언어가 있습니다. 이는 컴퓨터의 작업 처리 방식과 유사하기 때문에 객체지향 언어를 사용하는 것에 비해 더 빨리 처리되어 시간적으로 유리합니다. 옛날에는 하드웨어와 소프트웨어의 개발 속도차이가 크지 않았습니다. 하지만 하드웨어의 빠른 발전을 통해 컴퓨팅 환경은 급속도로 증가했지만 소프트웨어 개발 시간이 따라가지 못하게 되고 이런 상황에 소프트웨어의 개발시간을 단축하되 하드웨어에 기본적인 사양을 잡아먹어도 더 이상 큰 단점이 아니기에 모듈화, 캡슐화해서 개념적으로...
    </summary>
  

  </entry>

  
  <entry>
    <title>Introduction to Database (1) - Introduction</title>
    <link href="http://localhost:4000/posts/Introduction-to-Database(1)-copy/" rel="alternate" type="text/html" title="Introduction to Database (1) - Introduction" />
    <published>2023-02-01T01:00:00+09:00</published>
  
    <updated>2023-02-01T01:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Introduction-to-Database(1)-copy/</id>
    <content src="http://localhost:4000/posts/Introduction-to-Database(1)-copy/" />
    <author>
      <name>Hajun</name>
    </author>

  
    
    <category term="Database" />
    
    <category term="Introduction to Database" />
    
  

  
    <summary>
      





      본 내용은 “Based on Database System Concepts - 7th Edition” 내용을 정리한 내용입니다.

1. 데이터베이스(Database)란?

체계적이고 조직적으로 정리된 전자식 또는 기타 수단으로 개별적으로 접근할 수 있는 독립된 저작물, 데이터 또는 기타 소재의 수합물을 말합니다.

2. Database Applications Example


  Enterprise Information
    
      Sales: customers, products, purchases
      Accounting: payments, receipts, assets
      Human Resources: Information about employees, salaries, payro...
    </summary>
  

  </entry>

  
  <entry>
    <title>Introduction to Java (4) - 제어 흐름 이해하기</title>
    <link href="http://localhost:4000/posts/Introduction-to-Java(4)/" rel="alternate" type="text/html" title="Introduction to Java (4) - 제어 흐름 이해하기" />
    <published>2023-01-25T00:00:00+09:00</published>
  
    <updated>2023-03-17T22:46:19+09:00</updated>
  
    <id>http://localhost:4000/posts/Introduction-to-Java(4)/</id>
    <content src="http://localhost:4000/posts/Introduction-to-Java(4)/" />
    <author>
      <name>Hajun</name>
    </author>

  
    
    <category term="Java" />
    
    <category term="Introduction to Java" />
    
  

  
    <summary>
      





      제어 흐름은 자세히 다루지 않고 키포인트만 짚고 넘어갈 것입니다. 제어 흐름은 기존에 다른 언어를 사용하신 분들에게는 익숙한 부분이고, 그만큼 앞으로 프로그래밍 하시는 동안 굉장한 높은 중요도를 가지고 있습니다. 따라서, 처음 배우시는 분들에게는 꼭 요약본이 아닌 책이나 강의를 먼저 읽어보는 것을 적극 추천드립니다.

1. 조건문

조건문이란 주어진 조건에 따라 다른 문장을 선택할 수 있도록 프로그래밍하는 것을 말합니다.

  if문, if-else문, if-else if-else문, if-if문
  조건문과 조건 연산자 –&amp;gt; max = (a &amp;gt; b) ? a : b;
  
    switch-case 문
  
  if-else if문과 if-if문의 차이
    
      if-else i...
    </summary>
  

  </entry>

</feed>


