

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Hajun's Dev Note</title>
  <subtitle>Hajun's development &amp; tech knowledge data warehouse</subtitle>
  <updated>2023-03-14T14:16:15+09:00</updated>
  <author>
    <name>Hajun Lee</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator>
  <rights> © 2023 Hajun Lee </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Introduction to Java (5) - 클래스와 객채 1</title>
    <link href="http://localhost:4000/posts/Introduction-to-Java(5)/" rel="alternate" type="text/html" title="Introduction to Java (5) - 클래스와 객채 1" />
    <published>2023-02-04T01:00:00+09:00</published>
  
    <updated>2023-02-04T01:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Introduction-to-Java(5)/</id>
    <content src="http://localhost:4000/posts/Introduction-to-Java(5)/" />
    <author>
      <name>Hajun</name>
    </author>

  
    
    <category term="Introduction" />
    
    <category term="Java" />
    
  

  
    <summary>
      





      1. 객체 지향 프로그래밍과 클래스 (절차지향 vs 객체지향)

절차지향 프로그래밍이란 물이 위에서 아래로 흐르는 것처럼 순차적인 처리가 중요시 되며 프로그램 전체가 유기적으로 연결되도록 만드는 프로그래밍 기법입니다. 대표적인 절차지향 언어에는 C언어가 있습니다. 이는 컴퓨터의 작업 처리 방식과 유사하기 때문에 객체지향 언어를 사용하는 것에 비해 더 빨리 처리되어 시간적으로 유리합니다. 옛날에는 하드웨어와 소프트웨어의 개발 속도차이가 크지 않았습니다. 하지만 하드웨어의 빠른 발전을 통해 컴퓨팅 환경은 급속도로 증가했지만 소프트웨어 개발 시간이 따라가지 못하게 되고 이런 상황에 소프트웨어의 개발시간을 단축하되 하드웨어에 기본적인 사양을 잡아먹어도 더 이상 큰 단점이 아니기에 모듈화, 캡슐화해서 개념적으로...
    </summary>
  

  </entry>

  
  <entry>
    <title>Introduction to Database (1) - Introduction</title>
    <link href="http://localhost:4000/posts/Introduction-to-Database(1)/" rel="alternate" type="text/html" title="Introduction to Database (1) - Introduction" />
    <published>2023-02-01T01:00:00+09:00</published>
  
    <updated>2023-02-01T01:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Introduction-to-Database(1)/</id>
    <content src="http://localhost:4000/posts/Introduction-to-Database(1)/" />
    <author>
      <name>Hajun</name>
    </author>

  
    
    <category term="Introduction" />
    
    <category term="Database" />
    
  

  
    <summary>
      





      본 내용은 “Based on Database System Concepts - 7th Edition” 내용을 정리한 내용입니다.

1. 데이터베이스(Database)란?

체계적이고 조직적으로 정리된 전자식 또는 기타 수단으로 개별적으로 접근할 수 있는 독립된 저작물, 데이터 또는 기타 소재의 수합물을 말합니다.

2. Database Applications Example


  Enterprise Information
    
      Sales: customers, products, purchases
      Accounting: payments, receipts, assets
      Human Resources: Information about employees, salaries, payro...
    </summary>
  

  </entry>

  
  <entry>
    <title>Introduction to Java (4) - 제어 흐름 이해하기</title>
    <link href="http://localhost:4000/posts/Introduction-to-Java(4)/" rel="alternate" type="text/html" title="Introduction to Java (4) - 제어 흐름 이해하기" />
    <published>2023-01-25T00:00:00+09:00</published>
  
    <updated>2023-01-27T17:20:09+09:00</updated>
  
    <id>http://localhost:4000/posts/Introduction-to-Java(4)/</id>
    <content src="http://localhost:4000/posts/Introduction-to-Java(4)/" />
    <author>
      <name>Hajun</name>
    </author>

  
    
    <category term="Introduction" />
    
    <category term="Java" />
    
  

  
    <summary>
      





      제어 흐름은 자세히 다루지 않고 키포인트만 짚고 넘어갈 것입니다. 제어 흐름은 기존에 다른 언어를 사용하신 분들에게는 익숙한 부분이고, 그만큼 앞으로 프로그래밍 하시는 동안 굉장한 높은 중요도를 가지고 있습니다. 따라서, 처음 배우시는 분들에게는 꼭 요약본이 아닌 책이나 강의를 먼저 읽어보는 것을 적극 추천드립니다.

1. 조건문

조건문이란 주어진 조건에 따라 다른 문장을 선택할 수 있도록 프로그래밍하는 것을 말합니다.

  if문, if-else문, if-else if-else문, if-if문
  조건문과 조건 연산자 –&amp;gt; max = (a &amp;gt; b) ? a : b;
  
    switch-case 문
  
  if-else if문과 if-if문의 차이
    
      if-else i...
    </summary>
  

  </entry>

  
  <entry>
    <title>Introduction to Java (3) - 자바의 여러가지 연산자</title>
    <link href="http://localhost:4000/posts/Introduction-to-Java(3)/" rel="alternate" type="text/html" title="Introduction to Java (3) - 자바의 여러가지 연산자" />
    <published>2023-01-21T21:00:00+09:00</published>
  
    <updated>2023-01-21T21:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Introduction-to-Java(3)/</id>
    <content src="http://localhost:4000/posts/Introduction-to-Java(3)/" />
    <author>
      <name>Hajun</name>
    </author>

  
    
    <category term="Introduction" />
    
    <category term="Java" />
    
  

  
    <summary>
      





      1. 항과 연산자

연산에 사용하는 기호를 연산자(operator)라고 합니다. 그리고 연산에 사용하는 값을 항(operand)이라고 합니다. 연산자는 항의 개수에 따라 단항 연산자, 이항 연산자, 삼항 연산자로 나눌 수 있습니다.


  단항 연산자
    
      항이 한 개인 연산자
      ex) ++num
    
  
  이항 연산자
    
      항이 두 개인 연산자
      ex) num1 + num2;
    
  
  삼항 연산자
    
      항이 세 개인 연산자
      ex) (5 &amp;gt; 3 ? 1 : 0;)
    
  


프로그램에서 사용하는 연산자는 우선순위가 있습니다. 단항 연산자가 가장 높고 이항, 삼항 연산자 순서입니다.

2. 대입 연산자

대...
    </summary>
  

  </entry>

  
  <entry>
    <title>Introduction to Java (2) - 변수와 자료형</title>
    <link href="http://localhost:4000/posts/Introduction-to-Java(2)/" rel="alternate" type="text/html" title="Introduction to Java (2) - 변수와 자료형" />
    <published>2023-01-20T03:33:00+09:00</published>
  
    <updated>2023-01-20T23:01:24+09:00</updated>
  
    <id>http://localhost:4000/posts/Introduction-to-Java(2)/</id>
    <content src="http://localhost:4000/posts/Introduction-to-Java(2)/" />
    <author>
      <name>Hajun</name>
    </author>

  
    
    <category term="Introduction" />
    
    <category term="Java" />
    
  

  
    <summary>
      





      1. 변수란?

어떠한 값을 저장하려면 저장할 공간이 필요한데, 이 공간의 이름이 바로 변수입니다.
변수를 사용하기 위해 어떤 형태의 자료를 저장할 것인지 정해야합니다. 예를 들어, 사람의 나이를 저장하려면 정수 형태를 써야 하고, 이름을 저장하려면 문자 형태를 써야합니다. 이 형태를 변수의 ‘자료형’이라고 합니다. 변수의 자료형을 선택했다면 변수의 이름도 정해줘야 합니다.

package java;

public class variable {
    public static void main(String[] args) {
        int level;      //int는 정수형, level은 변수명 = 정수형 변수 level을 선언
        level = 10;     //값 10을 Lev...
    </summary>
  

  </entry>

</feed>


